
bst3360.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000069a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115e  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9e  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005aa  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068a  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008df  00000000  00000000  00003156  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ba c0       	rjmp	.+372    	; 0x176 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c1       	rjmp	.+720    	; 0x2fa <__vector_10>
  2a:	00 00       	nop
  2c:	87 c1       	rjmp	.+782    	; 0x33c <__vector_11>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop
  98:	89 c0       	rjmp	.+274    	; 0x1ac <__bad_interrupt>
  9a:	00 00       	nop
  9c:	87 c0       	rjmp	.+270    	; 0x1ac <__bad_interrupt>
  9e:	00 00       	nop
  a0:	85 c0       	rjmp	.+266    	; 0x1ac <__bad_interrupt>
  a2:	00 00       	nop
  a4:	83 c0       	rjmp	.+262    	; 0x1ac <__bad_interrupt>
  a6:	00 00       	nop
  a8:	81 c0       	rjmp	.+258    	; 0x1ac <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	5e 01       	movw	r10, r28
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 f7       	brcc	.-64     	; 0x78 <__SREG__+0x39>
  b8:	00 22       	and	r0, r16
  ba:	00 22       	and	r0, r16
  bc:	00 00       	nop
  be:	19 01       	movw	r2, r18
  c0:	45 00       	.word	0x0045	; ????
  c2:	21 00       	.word	0x0021	; ????
  c4:	00 09       	sbc	r16, r0
  c6:	01 09       	sbc	r16, r1
  c8:	00 03       	mulsu	r16, r16
  ca:	00 00       	nop
  cc:	f3 00       	.word	0x00f3	; ????
  ce:	04 01       	movw	r0, r8
  d0:	03 09       	sbc	r16, r3
  d2:	04 e9       	ldi	r16, 0x94	; 148
  d4:	00 08       	sbc	r0, r0
  d6:	02 03       	mulsu	r16, r18
  d8:	09 04       	cpc	r0, r9
  da:	dd 00       	.word	0x00dd	; ????
  dc:	0a 0a       	Address 0x00000000000000dc is out of bounds.
.word	0xffff	; ????

000000dd <string2>:
  dd:	0a 03 33 00 33 00 36 00 30 00 00 00                 ..3.3.6.0...

000000e9 <string1>:
  e9:	08 03 62 00 73 00 74 00 00 00                       ..b.s.t...

000000f3 <string0>:
  f3:	04 03 09 04                                         ....

000000f7 <config1_descriptor>:
  f7:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
 107:	02 00 09 21 11 01 00 01 22 45 00 07 05 83 03 06     ...!...."E......
 117:	00 01                                               ..

00000119 <mouse_hid_report_desc>:
 119:	05 01 09 02 a1 01 05 09 19 01 29 05 15 00 25 01     ..........)...%.
 129:	95 05 75 01 81 02 95 01 75 03 81 03 05 01 09 30     ..u.....u......0
 139:	09 31 16 01 80 26 ff 7f 36 01 80 46 ff 7f 75 10     .1...&..6..F..u.
 149:	95 02 81 06 09 38 15 81 25 7f 35 81 45 7f 75 08     .....8..%.5.E.u.
 159:	95 01 81 06 c0                                      .....

0000015e <device_descriptor>:
 15e:	12 01 00 02 00 00 00 20 c0 16 7e 04 00 01 01 02     ....... ..~.....
 16e:	00 01                                               ..

00000170 <endpoint_config_table>:
 170:	00 00 01 c1 02 00                                   ......

00000176 <__ctors_end>:
 176:	11 24       	eor	r1, r1
 178:	1f be       	out	0x3f, r1	; 63
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	da e0       	ldi	r29, 0x0A	; 10
 17e:	de bf       	out	0x3e, r29	; 62
 180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
 182:	11 e0       	ldi	r17, 0x01	; 1
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	e4 e0       	ldi	r30, 0x04	; 4
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
 18e:	05 90       	lpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a2 30       	cpi	r26, 0x02	; 2
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a2 e0       	ldi	r26, 0x02	; 2
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a3 30       	cpi	r26, 0x03	; 3
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	02 d0       	rcall	.+4      	; 0x1ae <main>
 1aa:	2a c2       	rjmp	.+1108   	; 0x600 <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <main>:
}

int main(void)
{
	// set clock prescaler for 8MHz
	CLKPR = 0x80;
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	CLKPR = 0x00;
 1b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
#define DEBOUNCE_TIME 128 // debounce time in units of 125us. only affects release latency.

static void pins_init(void)
{
	// buttons
	PORTD |= 0b00000001; // L
 1b8:	58 9a       	sbi	0x0b, 0	; 11
	EICRA = 0b01010101; // generate interrupt request on any edge of D0/D1/D2/D3
 1ba:	85 e5       	ldi	r24, 0x55	; 85
 1bc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0; // but don't enable any actual interrupts
 1c0:	1d ba       	out	0x1d, r1	; 29
	EIFR = 0b00001111; // clear EIFR
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	8c bb       	out	0x1c, r24	; 28
	// set clock prescaler for 8MHz
	CLKPR = 0x80;
	CLKPR = 0x00;
	pins_init();
	// previous state to compare against for debouncing
	uint8_t btn_prev = (~PIND) & 0b00000001; // read L, R, M, FSB, RSB, DPI
 1c6:	c9 b1       	in	r28, 0x09	; 9
 1c8:	c0 95       	com	r28
 1ca:	c1 70       	andi	r28, 0x01	; 1
	// previously transmitted button state
	uint8_t btn_usb_prev = 0x00;
	
	// if dpi button is pressed when plugging in, jump to bootloader
	// see https://www.pjrc.com/teensy/jump_to_bootloader.html
	delay_ms(50);
 1cc:	2f e7       	ldi	r18, 0x7F	; 127
 1ce:	88 e3       	ldi	r24, 0x38	; 56
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x24>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x2e>
 1dc:	00 00       	nop
	if (!(PIND & (1<<0)))
 1de:	48 99       	sbic	0x09, 0	; 9
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0x38>
		__asm__ volatile ("jmp 0x7e00");
 1e2:	0c 94 00 3f 	jmp	0x7e00	; 0x7e00 <__stack+0x7301>
	
	usb_init();
	while (!usb_configured());
 1e6:	6f d0       	rcall	.+222    	; 0x2c6 <usb_init>
 1e8:	85 d0       	rcall	.+266    	; 0x2f4 <usb_configured>
 1ea:	88 23       	and	r24, r24
	delay_ms(456); // arbitrary
 1ec:	e9 f3       	breq	.-6      	; 0x1e8 <main+0x3a>
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	81 e2       	ldi	r24, 0x21	; 33
 1f2:	9b e0       	ldi	r25, 0x0B	; 11
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x46>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x50>

	// set up timer0 to set OCF0A in TIFR0 every 125us
	TCCR0A = 0x02; // CTC
 1fe:	00 00       	nop
 200:	82 e0       	ldi	r24, 0x02	; 2
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
 202:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249; // = 125 - 1
 204:	85 bd       	out	0x25, r24	; 37
 206:	89 ef       	ldi	r24, 0xF9	; 249

	cli();
 208:	87 bd       	out	0x27, r24	; 39
	// consider button to be released if this time exceeds DEBOUNCE_TIME.
	uint8_t btn_time = 0;
	// binary OR of all button states since previous usb transmission
	uint8_t btn_usb = 0x00;
	// previously transmitted button state
	uint8_t btn_usb_prev = 0x00;
 20a:	f8 94       	cli
	uint8_t btn_prev = (~PIND) & 0b00000001; // read L, R, M, FSB, RSB, DPI
	// time (in 125us) button has been unpressed.
	// consider button to be released if this time exceeds DEBOUNCE_TIME.
	uint8_t btn_time = 0;
	// binary OR of all button states since previous usb transmission
	uint8_t btn_usb = 0x00;
 20c:	e1 2c       	mov	r14, r1
	pins_init();
	// previous state to compare against for debouncing
	uint8_t btn_prev = (~PIND) & 0b00000001; // read L, R, M, FSB, RSB, DPI
	// time (in 125us) button has been unpressed.
	// consider button to be released if this time exceeds DEBOUNCE_TIME.
	uint8_t btn_time = 0;
 20e:	d0 e0       	ldi	r29, 0x00	; 0
			//PIND 0 EIFR 0: low, no edges -> is low
			//PIND 0 EIFR 1: low, edge -> is low
			//PIND 1 EIFR 0: high, no edges -> always high during last 125us
			//PIND 1 EIFR 1: high, edge -> low at some point in the last 125us
			const uint8_t btn_unpressed = PIND & (~(EIFR) | 0b00000001);
			EIFR = 0b00000111; // clear EIFR
 210:	f1 2c       	mov	r15, r1
 212:	87 e0       	ldi	r24, 0x07	; 7
 214:	d8 2e       	mov	r13, r24
 216:	cc 24       	eor	r12, r12
				// mask dpi button state for usb
				const uint8_t btn_dbncd_mask = btn_dbncd & 0b00000001;

				// there's nothing to do if nothing's changed in this 125us cycle
				if (btn_dbncd_mask != (btn_prev & 0b00000001)) {
					UENUM = MOUSE_ENDPOINT;
 218:	c3 94       	inc	r12
 21a:	93 e0       	ldi	r25, 0x03	; 3
					
					btn_usb |= btn_dbncd_mask & 0b00000001; // L
					// only load bank with data if there's something worth transmitting
					if (btn_usb != btn_usb_prev) {
						UEDATX = btn_usb;
						UEINTX = 0x3a;
 21c:	b9 2e       	mov	r11, r25
 21e:	2a e3       	ldi	r18, 0x3A	; 58
 220:	a2 2e       	mov	r10, r18
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
	OCR0A = 249; // = 125 - 1

	cli();
	while (1) {
		for (uint8_t i = 0; i < 8; i++) {
 222:	1c 2f       	mov	r17, r28
		// synchronization to usb frames and 125us intervals
			// polling interrupt flags gives 5 clock cycles or so of
			// jitter. possible to eliminate by going into sleep
			// mode and waking up using interrupts, but whatever.
			if (i == 0) {
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	00 23       	and	r16, r16
				// reset prescaler phase, not really necessary
				GTCCR |= (1<<PSRSYNC);
				TCNT0 = 0;
			} else {
				// sync to 125us intervals using timer0
				while (!(TIFR0 & (1<<OCF0A)));
 228:	c1 f1       	breq	.+112    	; 0x29a <main+0xec>
 22a:	a9 9b       	sbis	0x15, 1	; 21
			}
			TIFR0 |= (1<<OCF0A); // 0CF0A is cleared by writing 1
 22c:	fe cf       	rjmp	.-4      	; 0x22a <main+0x7c>
			//high = not pressed, low = pressed
			//PIND 0 EIFR 0: low, no edges -> is low
			//PIND 0 EIFR 1: low, edge -> is low
			//PIND 1 EIFR 0: high, no edges -> always high during last 125us
			//PIND 1 EIFR 1: high, edge -> low at some point in the last 125us
			const uint8_t btn_unpressed = PIND & (~(EIFR) | 0b00000001);
 22e:	a9 9a       	sbi	0x15, 1	; 21
 230:	99 b1       	in	r25, 0x09	; 9
 232:	8c b3       	in	r24, 0x1c	; 28
 234:	80 95       	com	r24
 236:	81 60       	ori	r24, 0x01	; 1
			EIFR = 0b00000111; // clear EIFR
 238:	89 23       	and	r24, r25
			//           0 |            1 |         =0 |          =1
			//           1 |            0 |         ++ | (time < DEBOUNCE_TIME)
			//           1 |            1 |         =0 |          =1
			uint8_t btn_dbncd = 0x00;

			if ((btn_prev & (1<<0)) && (btn_unpressed & (1<<0))) {
 23a:	dc ba       	out	0x1c, r13	; 28
 23c:	cc 23       	and	r28, r28
 23e:	d9 f1       	breq	.+118    	; 0x2b6 <main+0x108>
 240:	c8 2f       	mov	r28, r24
 242:	c1 70       	andi	r28, 0x01	; 1
 244:	80 ff       	sbrs	r24, 0
				btn_time++;
 246:	39 c0       	rjmp	.+114    	; 0x2ba <main+0x10c>
				if (btn_time < DEBOUNCE_TIME)
					btn_dbncd |= (1<<0);
 248:	f3 94       	inc	r15
 24a:	cf 2d       	mov	r28, r15
 24c:	c0 95       	com	r28
 24e:	cc 1f       	adc	r28, r28
				btn_dbncd |= (~btn_unpressed) & (1<<0);
			}

                // usb
				// first make sure it's configured
				sei();
 250:	cc 27       	eor	r28, r28
				while (!usb_configured());
 252:	cc 1f       	adc	r28, r28
 254:	78 94       	sei
 256:	4e d0       	rcall	.+156    	; 0x2f4 <usb_configured>
 258:	88 23       	and	r24, r24
				cli();
 25a:	e9 f3       	breq	.-6      	; 0x256 <main+0xa8>
				// i'm fairly certain all of it is correct.
				// mask dpi button state for usb
				const uint8_t btn_dbncd_mask = btn_dbncd & 0b00000001;

				// there's nothing to do if nothing's changed in this 125us cycle
				if (btn_dbncd_mask != (btn_prev & 0b00000001)) {
 25c:	f8 94       	cli
 25e:	c1 17       	cp	r28, r17
					UENUM = MOUSE_ENDPOINT;
 260:	b1 f0       	breq	.+44     	; 0x28e <main+0xe0>
 262:	b0 92 e9 00 	sts	0x00E9, r11	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					if (UESTA0X & (1<<NBUSYBK0)) { // untransmitted data still in bank
 266:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 26a:	80 ff       	sbrs	r24, 0
						UEINTX |= (1<<RXOUTI); // kill bank; RXOUTI == KILLBK
 26c:	29 c0       	rjmp	.+82     	; 0x2c0 <main+0x112>
 26e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 272:	84 60       	ori	r24, 0x04	; 4
 274:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
						while (UEINTX & (1<<RXOUTI));
 278:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 27c:	82 fd       	sbrc	r24, 2
						// so that there was nothing worth transmitting before.
						btn_usb_prev = btn_usb;
						btn_usb = 0x00;
					}
					
					btn_usb |= btn_dbncd_mask & 0b00000001; // L
 27e:	fc cf       	rjmp	.-8      	; 0x278 <main+0xca>
					// only load bank with data if there's something worth transmitting
					if (btn_usb != btn_usb_prev) {
 280:	dc 2b       	or	r29, r28
 282:	ed 16       	cp	r14, r29
						UEDATX = btn_usb;
 284:	21 f0       	breq	.+8      	; 0x28e <main+0xe0>
 286:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
						UEINTX = 0x3a;
 28a:	a0 92 e8 00 	sts	0x00E8, r10	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
	OCR0A = 249; // = 125 - 1

	cli();
	while (1) {
		for (uint8_t i = 0; i < 8; i++) {
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	08 30       	cpi	r16, 0x08	; 8
 292:	39 f2       	breq	.-114    	; 0x222 <main+0x74>
		// synchronization to usb frames and 125us intervals
			// polling interrupt flags gives 5 clock cycles or so of
			// jitter. possible to eliminate by going into sleep
			// mode and waking up using interrupts, but whatever.
			if (i == 0) {
 294:	1c 2f       	mov	r17, r28
 296:	01 11       	cpse	r16, r1
				// sync to usb frames (1ms)
				UDINT &= ~(1<<SOFI);
 298:	c8 cf       	rjmp	.-112    	; 0x22a <main+0x7c>
 29a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
				while(!(UDINT & (1<<SOFI)));
 2a4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 2a8:	82 ff       	sbrs	r24, 2
				// reset prescaler phase, not really necessary
				GTCCR |= (1<<PSRSYNC);
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <main+0xf6>
 2ac:	83 b5       	in	r24, 0x23	; 35
 2ae:	81 60       	ori	r24, 0x01	; 1
				TCNT0 = 0;
 2b0:	83 bd       	out	0x23, r24	; 35
 2b2:	16 bc       	out	0x26, r1	; 38
 2b4:	bc cf       	rjmp	.-136    	; 0x22e <main+0x80>
 2b6:	c8 2f       	mov	r28, r24
 2b8:	c1 70       	andi	r28, 0x01	; 1
			if ((btn_prev & (1<<0)) && (btn_unpressed & (1<<0))) {
				btn_time++;
				if (btn_time < DEBOUNCE_TIME)
					btn_dbncd |= (1<<0);
			} else {
				btn_time = 0;
 2ba:	cc 25       	eor	r28, r12
 2bc:	f1 2c       	mov	r15, r1
 2be:	ca cf       	rjmp	.-108    	; 0x254 <main+0xa6>
 2c0:	ed 2e       	mov	r14, r29
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	dd cf       	rjmp	.-70     	; 0x280 <main+0xd2>

000002c6 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	USB_FREEZE();				// enable USB
 2cc:	80 ea       	ldi	r24, 0xA0	; 160
 2ce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	PLL_CONFIG();				// config PLL
 2d2:	82 e1       	ldi	r24, 0x12	; 18
 2d4:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 2d6:	09 b4       	in	r0, 0x29	; 41
 2d8:	00 fe       	sbrs	r0, 0
 2da:	fd cf       	rjmp	.-6      	; 0x2d6 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 2dc:	80 e9       	ldi	r24, 0x90	; 144
 2de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
 2e2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
 2e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        UDIEN = (1<<EORSTE);
 2ea:	88 e0       	ldi	r24, 0x08	; 8
 2ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
 2f0:	78 94       	sei
 2f2:	08 95       	ret

000002f4 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 2f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
}
 2f8:	08 95       	ret

000002fa <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
	uint8_t intbits;

        intbits = UDINT;
 306:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 30a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 30e:	83 ff       	sbrs	r24, 3
 310:	0f c0       	rjmp	.+30     	; 0x330 <__vector_10+0x36>
		UENUM = 0;
 312:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 31c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 320:	82 e2       	ldi	r24, 0x22	; 34
 322:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 32c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        }
}
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 35e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
 362:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 366:	83 ff       	sbrs	r24, 3
 368:	3b c0       	rjmp	.+118    	; 0x3e0 <__vector_11+0xa4>
                bmRequestType = UEDATX;
 36a:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 36e:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 372:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 376:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	38 2b       	or	r19, r24
                wIndex = UEDATX;
 37e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 382:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	fc 01       	movw	r30, r24
 38a:	f4 2b       	or	r31, r20
 38c:	af 01       	movw	r20, r30
                wLength = UEDATX;
 38e:	a0 91 f1 00 	lds	r26, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 392:	b0 91 f1 00 	lds	r27, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 396:	82 ef       	ldi	r24, 0xF2	; 242
 398:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 39c:	66 30       	cpi	r22, 0x06	; 6
 39e:	a1 f1       	breq	.+104    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
 3a0:	65 30       	cpi	r22, 0x05	; 5
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <__vector_11+0x6a>
 3a4:	aa c0       	rjmp	.+340    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 3a6:	69 30       	cpi	r22, 0x09	; 9
 3a8:	09 f4       	brne	.+2      	; 0x3ac <__vector_11+0x70>
 3aa:	3c c0       	rjmp	.+120    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 3ac:	68 30       	cpi	r22, 0x08	; 8
 3ae:	91 f0       	breq	.+36     	; 0x3d4 <__vector_11+0x98>
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 3b0:	61 11       	cpse	r22, r1
 3b2:	da c0       	rjmp	.+436    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 3b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3b8:	80 ff       	sbrs	r24, 0
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <__vector_11+0x78>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 3bc:	72 38       	cpi	r23, 0x82	; 130
 3be:	09 f4       	brne	.+2      	; 0x3c2 <__vector_11+0x86>
 3c0:	c9 c0       	rjmp	.+402    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 3c2:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 3c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
 3c8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 3cc:	8e ef       	ldi	r24, 0xFE	; 254
 3ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <__vector_11+0xaa>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 3d4:	70 38       	cpi	r23, 0x80	; 128
 3d6:	09 f4       	brne	.+2      	; 0x3da <__vector_11+0x9e>
 3d8:	9b c0       	rjmp	.+310    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
				}
				return;
			}
		}
		#endif
		if (wIndex == MOUSE_INTERFACE) {
 3da:	45 2b       	or	r20, r21
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <__vector_11+0xa4>
 3de:	a4 c0       	rjmp	.+328    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
					return;
				}
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 3e0:	81 e2       	ldi	r24, 0x21	; 33
 3e2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti
 408:	8c ea       	ldi	r24, 0xAC	; 172
 40a:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 40c:	fc 01       	movw	r30, r24
 40e:	65 91       	lpm	r22, Z+
 410:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
 412:	26 17       	cp	r18, r22
 414:	37 07       	cpc	r19, r23
 416:	79 f1       	breq	.+94     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 418:	07 96       	adiw	r24, 0x07	; 7
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	8d 3d       	cpi	r24, 0xDD	; 221
 41e:	9f 07       	cpc	r25, r31
 420:	a9 f7       	brne	.-22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 422:	de cf       	rjmp	.-68     	; 0x3e0 <__vector_11+0xa4>
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 424:	71 11       	cpse	r23, r1
 426:	d9 cf       	rjmp	.-78     	; 0x3da <__vector_11+0x9e>
			usb_configuration = wValue;
 428:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 42c:	8e ef       	ldi	r24, 0xFE	; 254
 42e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 432:	81 e0       	ldi	r24, 0x01	; 1
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 434:	20 e7       	ldi	r18, 0x70	; 112
 436:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 438:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 43c:	a9 01       	movw	r20, r18
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	f9 01       	movw	r30, r18
 444:	94 91       	lpm	r25, Z
				UECONX = en;
 446:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 44a:	99 23       	and	r25, r25
 44c:	09 f4       	brne	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	80 c0       	rjmp	.+256    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
					UECFG0X = pgm_read_byte(cfg++);
 450:	fa 01       	movw	r30, r20
 452:	44 91       	lpm	r20, Z
 454:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 458:	31 96       	adiw	r30, 0x01	; 1
 45a:	e4 91       	lpm	r30, Z
 45c:	2d 5f       	subi	r18, 0xFD	; 253
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	85 30       	cpi	r24, 0x05	; 5
 468:	39 f7       	brne	.-50     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 46a:	8e e1       	ldi	r24, 0x1E	; 30
 46c:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
        		UERST = 0;
 470:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			return;
 474:	b8 cf       	rjmp	.-144    	; 0x3e6 <__vector_11+0xaa>
				if (desc_val != wValue) {
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 476:	fc 01       	movw	r30, r24
 478:	32 96       	adiw	r30, 0x02	; 2
 47a:	65 91       	lpm	r22, Z+
 47c:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
 47e:	46 17       	cp	r20, r22
 480:	57 07       	cpc	r21, r23
 482:	09 f0       	breq	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	c9 cf       	rjmp	.-110    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 486:	fc 01       	movw	r30, r24
 488:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 48a:	45 91       	lpm	r20, Z+
 48c:	54 91       	lpm	r21, Z
				list += 2;
 48e:	fc 01       	movw	r30, r24
 490:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 492:	24 91       	lpm	r18, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 494:	8a 2f       	mov	r24, r26
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9b 2b       	or	r25, r27
 49a:	8f 3f       	cpi	r24, 0xFF	; 255
 49c:	91 05       	cpc	r25, r1
 49e:	11 f0       	breq	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	53 c0       	rjmp	.+166    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 4a4:	82 17       	cp	r24, r18
 4a6:	08 f4       	brcc	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	4e c0       	rjmp	.+156    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4aa:	6e ef       	ldi	r22, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 4ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 4b0:	98 2f       	mov	r25, r24
 4b2:	95 70       	andi	r25, 0x05	; 5
 4b4:	d9 f3       	breq	.-10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
				if (i & (1<<RXOUTI)) return;	// abort
 4b6:	82 fd       	sbrc	r24, 2
 4b8:	96 cf       	rjmp	.-212    	; 0x3e6 <__vector_11+0xaa>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 4ba:	32 2f       	mov	r19, r18
 4bc:	21 32       	cpi	r18, 0x21	; 33
 4be:	c0 f0       	brcs	.+48     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4c0:	30 e2       	ldi	r19, 0x20	; 32
				for (i = n; i; i--) {
 4c2:	fa 01       	movw	r30, r20
 4c4:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 4c6:	94 91       	lpm	r25, Z
 4c8:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 4cc:	81 50       	subi	r24, 0x01	; 1
 4ce:	31 96       	adiw	r30, 0x01	; 1
 4d0:	81 11       	cpse	r24, r1
 4d2:	f9 cf       	rjmp	.-14     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4d4:	8f ef       	ldi	r24, 0xFF	; 255
 4d6:	83 0f       	add	r24, r19
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	48 0f       	add	r20, r24
 4de:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 4e0:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4e2:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 4e6:	21 11       	cpse	r18, r1
 4e8:	e1 cf       	rjmp	.-62     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4ea:	30 32       	cpi	r19, 0x20	; 32
 4ec:	f9 f2       	breq	.-66     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4ee:	7b cf       	rjmp	.-266    	; 0x3e6 <__vector_11+0xaa>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 4f0:	21 11       	cpse	r18, r1
 4f2:	e7 cf       	rjmp	.-50     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4f4:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4f8:	76 cf       	rjmp	.-276    	; 0x3e6 <__vector_11+0xaa>
 4fa:	8e ef       	ldi	r24, 0xFE	; 254
 4fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 500:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 504:	80 ff       	sbrs	r24, 0
 506:	fc cf       	rjmp	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 508:	20 68       	ori	r18, 0x80	; 128
 50a:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 50e:	6b cf       	rjmp	.-298    	; 0x3e6 <__vector_11+0xaa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 514:	80 ff       	sbrs	r24, 0
 516:	fc cf       	rjmp	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 518:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 51c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 520:	8e ef       	ldi	r24, 0xFE	; 254
 522:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 526:	5f cf       	rjmp	.-322    	; 0x3e6 <__vector_11+0xaa>
				return;
			}
		}
		#endif
		if (wIndex == MOUSE_INTERFACE) {
			if (bmRequestType == 0xA1) {
 528:	71 3a       	cpi	r23, 0xA1	; 161
 52a:	09 f4       	brne	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52c:	44 c0       	rjmp	.+136    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
					UEDATX = mouse_protocol;
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 52e:	71 32       	cpi	r23, 0x21	; 33
 530:	09 f0       	breq	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	56 cf       	rjmp	.-340    	; 0x3e0 <__vector_11+0xa4>
				if (bRequest == HID_SET_PROTOCOL) {
 534:	6b 30       	cpi	r22, 0x0B	; 11
 536:	09 f0       	breq	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 538:	53 cf       	rjmp	.-346    	; 0x3e0 <__vector_11+0xa4>
					mouse_protocol = wValue;
 53a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 53e:	8e ef       	ldi	r24, 0xFE	; 254
 540:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 544:	50 cf       	rjmp	.-352    	; 0x3e6 <__vector_11+0xaa>
 546:	28 2f       	mov	r18, r24
 548:	b0 cf       	rjmp	.-160    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	aa cf       	rjmp	.-172    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 550:	9a 01       	movw	r18, r20
 552:	88 cf       	rjmp	.-240    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
 554:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
 558:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 55c:	85 fb       	bst	r24, 5
 55e:	88 27       	eor	r24, r24
 560:	80 f9       	bld	r24, 0
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
 562:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 566:	2e cf       	rjmp	.-420    	; 0x3c4 <__vector_11+0x88>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 568:	86 2f       	mov	r24, r22
 56a:	8d 7f       	andi	r24, 0xFD	; 253
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	09 f0       	breq	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 570:	34 cf       	rjmp	.-408    	; 0x3da <__vector_11+0x9e>
		  && bmRequestType == 0x02 && wValue == 0) {
 572:	72 30       	cpi	r23, 0x02	; 2
 574:	09 f0       	breq	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 576:	31 cf       	rjmp	.-414    	; 0x3da <__vector_11+0x9e>
 578:	23 2b       	or	r18, r19
 57a:	09 f0       	breq	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57c:	31 cf       	rjmp	.-414    	; 0x3e0 <__vector_11+0xa4>
			i = wIndex & 0x7F;
 57e:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	84 0f       	add	r24, r20
 584:	84 30       	cpi	r24, 0x04	; 4
 586:	08 f0       	brcs	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	2b cf       	rjmp	.-426    	; 0x3e0 <__vector_11+0xa4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 58a:	8e ef       	ldi	r24, 0xFE	; 254
 58c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 590:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 594:	63 30       	cpi	r22, 0x03	; 3
 596:	09 f4       	brne	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 598:	23 cf       	rjmp	.-442    	; 0x3e0 <__vector_11+0xa4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 59a:	89 e1       	ldi	r24, 0x19	; 25
 59c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a6:	88 0f       	add	r24, r24
 5a8:	4a 95       	dec	r20
 5aa:	ea f7       	brpl	.-6      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5ac:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 5b0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 5b4:	18 cf       	rjmp	.-464    	; 0x3e6 <__vector_11+0xaa>
			}
		}
		#endif
		if (wIndex == MOUSE_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
 5b6:	61 30       	cpi	r22, 0x01	; 1
 5b8:	79 f0       	breq	.+30     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
					UEDATX = 0;
					UEDATX = 0;
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 5ba:	63 30       	cpi	r22, 0x03	; 3
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5be:	10 cf       	rjmp	.-480    	; 0x3e0 <__vector_11+0xa4>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c4:	80 ff       	sbrs	r24, 0
 5c6:	fc cf       	rjmp	.-8      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = mouse_protocol;
 5c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5cc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5d0:	8e ef       	ldi	r24, 0xFE	; 254
 5d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5d6:	07 cf       	rjmp	.-498    	; 0x3e6 <__vector_11+0xaa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5dc:	80 ff       	sbrs	r24, 0
 5de:	fc cf       	rjmp	.-8      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		#endif
		if (wIndex == MOUSE_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = 0;
 5e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 5e4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 5e8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 5ec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 5f0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
 5f4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5f8:	8e ef       	ldi	r24, 0xFE	; 254
 5fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5fe:	f3 ce       	rjmp	.-538    	; 0x3e6 <__vector_11+0xaa>

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
